import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np

# cvs
data_1 = pd.read_csv('../project_dataset/extract - cash request - data analyst.csv')
data_2 = pd.read_csv('../project_dataset/extract - fees - data analyst - .csv')

st.title("Cohort Analysis for Ironhack Payments")

st.header("DataFrame for Cash Request:")
st.dataframe(data_1.head(10))

st.header("DataFrame for Fees:")
st.dataframe(data_2.head(10))

# Sample DataFrame
data = {
    'count': [289, 223, 184, 244, 473, 837, 2615, 3601, 3417, 4221, 7725, 140],
}
months = ['2019-12', '2020-01', '2020-02', '2020-03', '2020-04', '2020-05', '2020-06', '2020-07', '2020-08', '2020-09', '2020-10', '2020-11']

# Create a DataFrame with 'month_created' as index
df = pd.DataFrame(data, index=pd.to_datetime(months))

# Display DataFrame in Streamlit
st.header("Monthly Count Histogram")

# Plotting the histogram (bar plot) using Plotly for interactivity
fig = px.bar(df, x=df.index, y='count', labels={'count': 'Count', 'index': 'Month'}, title='Monthly Count Histogram')

# Show the plot in Streamlit
st.plotly_chart(fig)

st.markdown("<h2 style='text-align: center; color: black;'>Select an Analysis</h2>", unsafe_allow_html=True)

# Custom Radio Button Styling
option_selected = st.radio(
    "Choose one of the following options:",
    ['Frequency of Service Usage', 'Incident Rate', 'Revenue Generated by the Cohort', 'Fee Types Usage'],
    index=0
)

# Display different content based on the selected option
if option_selected == 'Frequency of Service Usage':
    data = {
        'absolute_frequency': [21719, 2251],
        'relative_frequency': [0.91, 0.09]
    }

    # Create DataFrame with 'cohort' as the index
    df_freq = pd.DataFrame(data, index=['Cohort-2', 'Cohort-1'])

    # Reset the index to move 'cohort' from index to a column
    df_freq.reset_index(inplace=True)

    # Rename columns to match expected names
    df_freq.columns = ['cohort', 'absolute_frequency', 'relative_frequency']

    # Define the desired order of cohorts (if necessary)
    desired_order = ['Cohort-1', 'Cohort-2']  # Adjust based on your cohort names
    df_freq = df_freq.set_index('cohort')  # Set 'cohort' as the index again (optional)

    # Reorder the DataFrame according to the desired order
    df_freq = df_freq.loc[desired_order]

    #  Streamlit Title
    st.header('Cohort Analysis - Absolute and Relative Frequency')

    # Plot the data with two y-axes
    fig, ax1 = plt.subplots()

    # Plot the absolute frequency on the left y-axis
    ax1.bar(df_freq.index, df_freq['absolute_frequency'], color='b', alpha=0.6, label='Absolute Frequency')
    ax1.set_xlabel('Cohorts')
    ax1.set_ylabel('Absolute Frequency', color='b')
    ax1.tick_params(axis='y', labelcolor='b')

    # Create a second y-axis for the relative frequency
    ax2 = ax1.twinx()
    ax2.plot(df_freq.index, df_freq['relative_frequency'], color='r', label='Relative Frequency', marker='o')
    ax2.set_ylabel('Relative Frequency', color='r')
    ax2.tick_params(axis='y', labelcolor='r')

    # Add title and show the plot
    fig.tight_layout()

    # Display the plot in Streamlit
    st.pyplot(fig)

elif option_selected == 'Incident Rate':
    st.subheader('Incident Rate by Cohort')
    # Plot histogram for incident rate across all cohorts
    fig, ax = plt.subplots()
    sns.histplot(data=freq_cohorts, x='incident_rate', hue='cohort', multiple="stack", bins=10, ax=ax)
    ax.set_title('Incident Rate for all Cohorts')
    st.pyplot(fig)

elif option_selected == 'Revenue Generated by the Cohort':
    st.subheader('Revenue Generated by Each Cohort')
    # Plot histogram for revenue across all cohorts
    fig, ax = plt.subplots()
    sns.histplot(data=freq_cohorts, x='revenue_generated', hue='cohort', multiple="stack", bins=10, ax=ax)
    ax.set_title('Revenue Generated for all Cohorts')
    st.pyplot(fig)

elif option_selected == 'Fee Types Usage':
    proportions_fees = {
        'cohort': ['Cohort-1', 'Cohort-2'],
        'incident': [0.17, 0.1],
        'instant_payment': [0, 0.53],
        'postpone': [0.83, 0.36]
    }

    # Convert the dictionary to a pandas DataFrame
    df_proportions = pd.DataFrame(proportions_fees)

    # Set 'cohort' as the index (for proper x-axis labeling)
    df_proportions.set_index('cohort', inplace=True)

    # Plotting grouped bars with matplotlib
    fig, ax = plt.subplots(figsize=(10, 6))

    # The x positions for the bars (one for each cohort)
    x = np.arange(len(df_proportions.index))

    # The width of each bar
    bar_width = 0.25 

    # Create the bars for each fee type
    ax.bar(x - bar_width, df_proportions['incident'], width=bar_width, label='Incident', color='blue')
    ax.bar(x, df_proportions['instant_payment'], width=bar_width, label='Instant Payment', color='darkorange')
    ax.bar(x + bar_width, df_proportions['postpone'], width=bar_width, label='Postpone', color='forestgreen')

    # Add labels and title
    ax.set_xlabel('Cohort')
    ax.set_ylabel('Proportion')
    ax.set_title('Proportions of Fee Types by Cohort')

    # Set the x-axis tick labels to be the cohort names
    ax.set_xticks(x)
    ax.set_xticklabels(df_proportions.index)

    # Add a legend
    ax.legend()

    # Display the plot in Streamlit
    st.pyplot(fig)